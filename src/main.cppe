#include <cmath>
#include <cstdint>
#include <iostream>
#include <set>
#include <vector>
#if defined(__EMSCRIPTEN__)
#include <SDL.h>
#include <SDL_ttf.h>
#include <emscripten.h>
#else
#include <SDL2/SDL.h>
#include <SDL2/SDL_ttf.h>
#endif

#define WIDTH 1200
#define HEIGHT 800
#define CELL_SIZE 16
#define BORDER_SIZE 1
#define NX (WIDTH / CELL_SIZE)
#define NY (HEIGHT / CELL_SIZE)
#define CENTER_X (WIDTH / 2)
#define CENTER_Y (HEIGHT / 2)
#define FPS 60
#define GenPS 5
#define FONT_PATH "FSEX302.ttf"
#define FONT_SIZE 18

enum GameState {
    SETUP,
    SIMULATE,
};

static SDL_Renderer *renderer;
static SDL_Window *window;
static TTF_Font *font;

static unsigned int tick1 = SDL_GetTicks();
static unsigned int tick2 = SDL_GetTicks();
static unsigned int frames = 0;
static bool running = true;
static double delta;
static enum GameState game_state = SETUP;

static int cell_size = CELL_SIZE;
static uint32_t next_time;
static int posX = CENTER_X / cell_size;
static int posY = CENTER_Y / cell_size;
static unsigned int GPS = GenPS;
static unsigned int gen = 0;
static int width = WIDTH;
static int height = HEIGHT;
static unsigned int gen_passed = 0;
static bool border = true;

std::set<std::pair<int, int>> keys;

uint32_t time_left(void) {
    uint32_t now = SDL_GetTicks();
    if (next_time <= now)
        return 0;
    return next_time - now;
}

std::vector<std::pair<int, int>> get_neighbors(int x, int y) {
    std::vector<std::pair<int, int>> neighbors;
    for (int i = -1; i <= 1; i++) {
        for (int j = -1; j <= 1; j++) {
            if (i == 0 && j == 0)
                continue;
            neighbors.push_back(std::make_pair(x + i, y + j));
        }
    }
    return neighbors;
}

void next_gen() {
    if (gen_passed == GPS)
        return;
    std::set<std::pair<int, int>> new_keys = keys;
    for (std::pair<int, int> cell : keys) {
        std::vector<std::pair<int, int>> neighbors =
            get_neighbors(cell.first, cell.second);
        int alive_neighbors = 0;
        for (std::pair<int, int> neighbor : neighbors) {
            if (keys.find(neighbor) != keys.end()) {
                alive_neighbors++;
                continue;
            }
            int alive_neighbors_neighbors = 0;
            std::vector<std::pair<int, int>> neighbors_of_neighbor =
                get_neighbors(neighbor.first, neighbor.second);
            for (auto nei : neighbors_of_neighbor)
                if (keys.find(nei) != keys.end())
                    alive_neighbors_neighbors++;
            if (alive_neighbors_neighbors == 3)
                new_keys.insert(neighbor);
        }
        if (alive_neighbors < 2 || alive_neighbors > 3)
            new_keys.erase(cell);
    }
    keys = new_keys;
    gen++;
    gen_passed = 0;
};

void write(std::string str, int x, int y) {
    SDL_Surface *surface;
    SDL_Texture *texture;
    surface =
        TTF_RenderText_Blended(font, str.c_str(), (SDL_Color){0, 255, 0, 255});
    texture = SDL_CreateTextureFromSurface(renderer, surface);
    SDL_Rect message_rect = {x, y, surface->w, surface->h};
    SDL_FreeSurface(surface);
    SDL_RenderCopy(renderer, texture, NULL, &message_rect);
    SDL_DestroyTexture(texture);
}

void input() {
    SDL_Event event;
    SDL_StartTextInput();
    while (SDL_PollEvent(&event)) {
        switch (event.type) {
        case SDL_QUIT:
            running = false;
            break;
        case SDL_KEYDOWN:
            switch (event.key.keysym.sym) {
            case SDLK_SPACE:
                if (game_state == SETUP)
                    game_state = SIMULATE;
                else
                    game_state = SETUP;
                break;
            case SDLK_j:
                posY--;
                break;
            case SDLK_k:
                posY++;
                break;
            case SDLK_h:
                posX++;
                break;
            case SDLK_l:
                posX--;
                break;
            case SDLK_b:
                border = !border;
                break;
            case SDLK_EQUALS:
                GPS++;
                break;
            case SDLK_MINUS:
                if (GPS > 1)
                    GPS--;
                break;
            case SDLK_r:
                keys.clear();
                gen = 0;
                game_state = SETUP;
                break;
            case SDLK_1:
                if (cell_size > 1)
                    cell_size--;
                break;
            case SDLK_2:
                cell_size++;
                break;
            }
            break;
        case SDL_MOUSEBUTTONDOWN:
            int x, y;
            SDL_GetMouseState(&x, &y);
            if (game_state == SETUP) {
                std::pair<int, int> position;
                position.first = x / cell_size - posX;
                position.second = y / cell_size - posY;
                if (keys.find(position) == keys.end())
                    keys.insert(position);
                else
                    keys.erase(position);
            }
            break;
        case SDL_WINDOWEVENT:
            if (event.window.event == SDL_WINDOWEVENT_RESIZED) {
                width = event.window.data1;
                height = event.window.data2;
            }
            break;
        }
    }
}

void render() {
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
    SDL_RenderClear(renderer);
    SDL_SetRenderDrawColor(renderer, 100, 100, 100, 255);

    if (border) {
        
    }

    SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
    for (auto cell : keys) {
        SDL_Rect r = {(posX + cell.first) * cell_size,
                      (posY + cell.second) * cell_size, cell_size, cell_size};
        SDL_RenderFillRect(renderer, &r);
    }

    const std::vector<std::string> osd = {
        "Generation: " + std::to_string(gen),
        "GPS: " + std::to_string(GPS),
        "FPS: " + std::to_string(FPS),
        "X, Y: " + std::to_string(posX) + ", " + std::to_string(posY),
    };

    int oy = 10, text_width, text_height;

    for (std::string line : osd) {
        TTF_SizeText(font, line.c_str(), &text_width, &text_height);
        write(line, 10, oy);
        oy += text_height;
    }

    SDL_RenderPresent(renderer);
}

void update() {
    if (game_state != SIMULATE)
        return;
    if (frames % FPS == 0)
        gen_passed = 0;
    if (GPS <= 60) {
        if ((frames % (FPS / GPS)) == 0) {
            next_gen();
        }
    } else {
        for (int i = 0; i < (int)GPS / FPS; i++) {
            next_gen();
        }
        if (frames % ((int)((float)GPS / (float)FPS) + 1) == 0) {
            next_gen();
        }
    }
    // if (frames % FPS == FPS - 1 && gen_passed < GPS)
    //     while (gen_passed < GPS)
    //         next_gen();
}

void main_loop() {
    update();
    input();
    render();

    SDL_Delay(time_left());
    next_time += 1000 / FPS;
    frames++;
}

int main() {
    if (SDL_Init(SDL_INIT_VIDEO | SDL_INIT_EVENTS) < 0)
#ifndef __EMSCRIPTEN__
        std::cout << "Failed at SDL_Init()" << std::endl;
#endif

    if (SDL_CreateWindowAndRenderer(width, height, SDL_WINDOW_RESIZABLE,
                                    &window, &renderer) < 0)
        std::cout << "Failed at SDL_CreateWindowAndRenderer()" << std::endl;
    if (TTF_Init() < 0)
        std::cout << "Failed at TTF_Init" << TTF_GetError() << std::endl;

    font = TTF_OpenFont(FONT_PATH, FONT_SIZE);
    if (font == nullptr)
        std::cout << "Failed at TTF_OpenFont()" << TTF_GetError() << std::endl;

    SDL_SetWindowTitle(window, "Conway's Game of Life");

    std::cout
        << "Click on cell to toggle\nPress space to switch between setup/main "
           "mode\nPress - + to change GPS (gen per sec)\nUse h, j, k, l to "
           "navigate around (vim keybind)\npress 1, 2 to change cell size"
        << std::endl;

#ifdef __EMSCRIPTEN__
    emscripten_set_main_loop(main_loop, 0, 1);
#else
    while (running)
        main_loop();
#endif

    TTF_CloseFont(font);
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
}
